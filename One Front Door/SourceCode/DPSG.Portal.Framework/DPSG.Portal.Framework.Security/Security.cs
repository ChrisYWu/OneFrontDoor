#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using DPSG.Portal.Framework.Security;


namespace DPSG.Portal.Framework.Security	
{
	public partial class PortalSecurity : OpenAccessContext, IPortalSecurityUnitOfWork
	{
		private static string connectionStringName = @"Portal_DataConnection";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
		
			
		private static MetadataSource metadataSource = XmlMetadataSource.FromAssemblyResource("Security.rlinq");
	
		public PortalSecurity()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public PortalSecurity(string connection)
			:base(connection, backend, metadataSource)
		{ }
	
		public PortalSecurity(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public PortalSecurity(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public PortalSecurity(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<UserPermission> UserPermissions 
		{
	    	get
	    	{
	        	return this.GetAll<UserPermission>();
	    	}
		}
		
		public IQueryable<UserAccount> UserAccounts 
		{
	    	get
	    	{
	        	return this.GetAll<UserAccount>();
	    	}
		}
		
		public IQueryable<RoleSystem> RoleSystems 
		{
	    	get
	    	{
	        	return this.GetAll<RoleSystem>();
	    	}
		}
		
		public IQueryable<RolePermission> RolePermissions 
		{
	    	get
	    	{
	        	return this.GetAll<RolePermission>();
	    	}
		}
		
		public IQueryable<RoleAttribute> RoleAttributes 
		{
	    	get
	    	{
	        	return this.GetAll<RoleAttribute>();
	    	}
		}
		
		public IQueryable<RoleAccount> RoleAccounts 
		{
	    	get
	    	{
	        	return this.GetAll<RoleAccount>();
	    	}
		}
		
		public IQueryable<Role> Roles 
		{
	    	get
	    	{
	        	return this.GetAll<Role>();
	    	}
		}
		
		public IQueryable<PermissionType> PermissionTypes 
		{
	    	get
	    	{
	        	return this.GetAll<PermissionType>();
	    	}
		}
		
		public IQueryable<ApplicationEntity> ApplicationEntities 
		{
	    	get
	    	{
	        	return this.GetAll<ApplicationEntity>();
	    	}
		}
		
		public IQueryable<Application> Applications 
		{
	    	get
	    	{
	        	return this.GetAll<Application>();
	    	}
		}
		
		public IQueryable<System> Systems 
		{
	    	get
	    	{
	        	return this.GetAll<System>();
	    	}
		}
		
		public IQueryable<NationalChain> NationalChains 
		{
	    	get
	    	{
	        	return this.GetAll<NationalChain>();
	    	}
		}
		
		public IQueryable<UserNationalChain> UserNationalChains 
		{
	    	get
	    	{
	        	return this.GetAll<UserNationalChain>();
	    	}
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "MsSql";
			backend.ProviderName = "System.Data.SqlClient";
			return backend;
		}
	}

	public interface IPortalSecurityUnitOfWork : IUnitOfWork
	{
		IQueryable<UserPermission> UserPermissions 
		{ 
			get;
		}

		IQueryable<UserAccount> UserAccounts 
		{ 
			get;
		}

		IQueryable<RoleSystem> RoleSystems 
		{ 
			get;
		}

		IQueryable<RolePermission> RolePermissions 
		{ 
			get;
		}

		IQueryable<RoleAttribute> RoleAttributes 
		{ 
			get;
		}

		IQueryable<RoleAccount> RoleAccounts 
		{ 
			get;
		}

		IQueryable<Role> Roles 
		{ 
			get;
		}

		IQueryable<PermissionType> PermissionTypes 
		{ 
			get;
		}

		IQueryable<ApplicationEntity> ApplicationEntities 
		{ 
			get;
		}

		IQueryable<Application> Applications 
		{ 
			get;
		}

		IQueryable<System> Systems 
		{ 
			get;
		}

		IQueryable<NationalChain> NationalChains 
		{ 
			get;
		}

		IQueryable<UserNationalChain> UserNationalChains 
		{ 
			get;
		}

	}
}
#pragma warning restore 1591

