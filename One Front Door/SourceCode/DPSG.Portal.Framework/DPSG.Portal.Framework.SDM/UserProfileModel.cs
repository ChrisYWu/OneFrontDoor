#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ContextGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using DPSG.Portal.Framework.SDM;

namespace DPSG.Portal.Framework.SDM	
{
	public partial class UserProfileModel : OpenAccessContext, IUserProfileModelUnitOfWork
	{
		private static string connectionStringName = @"Portal_DataConnection";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
				
		private static MetadataSource metadataSource = XmlMetadataSource.FromAssemblyResource("UserProfileModel.rlinq");
		
		public UserProfileModel()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public UserProfileModel(string connection)
			:base(connection, backend, metadataSource)
		{ }
		
		public UserProfileModel(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public UserProfileModel(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public UserProfileModel(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<KPI> KPIs 
		{
			get
			{
				return this.GetAll<KPI>();
			}
		}
		
		public IQueryable<Brand> Brands 
		{
			get
			{
				return this.GetAll<Brand>();
			}
		}
		
		public IQueryable<BusinessUnit> BusinessUnits 
		{
			get
			{
				return this.GetAll<BusinessUnit>();
			}
		}
		
		public IQueryable<Role> Roles 
		{
			get
			{
				return this.GetAll<Role>();
			}
		}
		
		public IQueryable<Region> Regions 
		{
			get
			{
				return this.GetAll<Region>();
			}
		}
		
		public IQueryable<UserInBranch> UserInBranches 
		{
			get
			{
				return this.GetAll<UserInBranch>();
			}
		}
		
		public IQueryable<UPSSyncConfig> UPSSyncConfigs 
		{
			get
			{
				return this.GetAll<UPSSyncConfig>();
			}
		}
		
		public IQueryable<UserInRole> UserInRoles 
		{
			get
			{
				return this.GetAll<UserInRole>();
			}
		}
		
		public IQueryable<Job> Jobs 
		{
			get
			{
				return this.GetAll<Job>();
			}
		}
		
		public IQueryable<Branch> Branches 
		{
			get
			{
				return this.GetAll<Branch>();
			}
		}
		
		public IQueryable<UserCan> UserCans 
		{
			get
			{
				return this.GetAll<UserCan>();
			}
		}
		
		public IQueryable<UserBranchTradeMark> UserBranchTradeMarks 
		{
			get
			{
				return this.GetAll<UserBranchTradeMark>();
			}
		}
		
		public IQueryable<FactOFDDailyMetric> FactOFDDailyMetrics 
		{
			get
			{
				return this.GetAll<FactOFDDailyMetric>();
			}
		}
		
		public IQueryable<DimBranchPlan> DimBranchPlans 
		{
			get
			{
				return this.GetAll<DimBranchPlan>();
			}
		}
		
		public IQueryable<TransMTDDay> TransMTDDays 
		{
			get
			{
				return this.GetAll<TransMTDDay>();
			}
		}
		
		public IQueryable<Material> Materials 
		{
			get
			{
				return this.GetAll<Material>();
			}
		}
		
		public IQueryable<BranchMaterial> BranchMaterials 
		{
			get
			{
				return this.GetAll<BranchMaterial>();
			}
		}
		
		public IQueryable<RegionalChain> RegionalChains 
		{
			get
			{
				return this.GetAll<RegionalChain>();
			}
		}
		
		public IQueryable<NationalChain> NationalChains 
		{
			get
			{
				return this.GetAll<NationalChain>();
			}
		}
		
		public IQueryable<LocalChain> LocalChains 
		{
			get
			{
				return this.GetAll<LocalChain>();
			}
		}
		
		public IQueryable<UserGeoRelevancy> UserGeoRelevancies 
		{
			get
			{
				return this.GetAll<UserGeoRelevancy>();
			}
		}
		
		public IQueryable<ChainHier> ChainHiers 
		{
			get
			{
				return this.GetAll<ChainHier>();
			}
		}
		
		public IQueryable<LocationChain> LocationChains 
		{
			get
			{
				return this.GetAll<LocationChain>();
			}
		}
		
		public IQueryable<Area> Areas 
		{
			get
			{
				return this.GetAll<Area>();
			}
		}
		
		public IQueryable<RoleSystem> RoleSystems 
		{
			get
			{
				return this.GetAll<RoleSystem>();
			}
		}
		
		public IQueryable<Route> Routes 
		{
			get
			{
				return this.GetAll<Route>();
			}
		}
		
		public IQueryable<UserRoute> UserRoutes 
		{
			get
			{
				return this.GetAll<UserRoute>();
			}
		}
		
		public IQueryable<AlertNotificationLastAccessDatetime> AlertNotificationLastAccessDatetimes 
		{
			get
			{
				return this.GetAll<AlertNotificationLastAccessDatetime>();
			}
		}
		
		public IQueryable<NationalChainMaster> NationalChainMasters 
		{
			get
			{
				return this.GetAll<NationalChainMaster>();
			}
		}
		
		public IQueryable<UserNationalChain> UserNationalChains 
		{
			get
			{
				return this.GetAll<UserNationalChain>();
			}
		}
		
		public IQueryable<ConsumptionLog_OFD> ConsumptionLog_OFDs 
		{
			get
			{
				return this.GetAll<ConsumptionLog_OFD>();
			}
		}
		
		public IQueryable<UserAccountMapping> UserAccountMappings 
		{
			get
			{
				return this.GetAll<UserAccountMapping>();
			}
		}
		
		public IQueryable<VBottlerSalesHier> VBottlerSalesHiers 
		{
			get
			{
				return this.GetAll<VBottlerSalesHier>();
			}
		}
		
		public IQueryable<Region1> Region1 
		{
			get
			{
				return this.GetAll<Region1>();
			}
		}
		
		public IQueryable<Bcsalesaccountability> Bcsalesaccountabilities 
		{
			get
			{
				return this.GetAll<Bcsalesaccountability>();
			}
		}
		
		public IQueryable<UserLocation> UserLocations 
		{
			get
			{
				return this.GetAll<UserLocation>();
			}
		}
		
		public IQueryable<UserChannel> UserChannels 
		{
			get
			{
				return this.GetAll<UserChannel>();
			}
		}
		
		public IQueryable<UserAccount> UserAccounts 
		{
			get
			{
				return this.GetAll<UserAccount>();
			}
		}
		
		public IQueryable<SPUserProfile> SPUserProfiles 
		{
			get
			{
				return this.GetAll<SPUserProfile>();
			}
		}
		
		public IQueryable<Plant> Plants 
		{
			get
			{
				return this.GetAll<Plant>();
			}
		}
		
		public IQueryable<MeasursType> MeasursTypes 
		{
			get
			{
				return this.GetAll<MeasursType>();
			}
		}
		
		public IQueryable<Department> Departments 
		{
			get
			{
				return this.GetAll<Department>();
			}
		}
		
		public IQueryable<MyPlant> MyPlants 
		{
			get
			{
				return this.GetAll<MyPlant>();
			}
		}
		
		public IQueryable<UserProductLine> UserProductLines 
		{
			get
			{
				return this.GetAll<UserProductLine>();
			}
		}
		
		public IQueryable<TradeMark> TradeMarks 
		{
			get
			{
				return this.GetAll<TradeMark>();
			}
		}
		
		public IEnumerable<UserPersona> GetUserPersonaByGSN(string gSN)
		{
			OAParameter parameterGSN = new OAParameter();
			parameterGSN.ParameterName = "GSN";
			parameterGSN.Size = 25;
			if(gSN != null)
			{
				parameterGSN.Value = gSN;
			}	
			else
			{
				parameterGSN.DbType = DbType.String;
				parameterGSN.Value = DBNull.Value;
			}

			IEnumerable<UserPersona> queryResult = this.ExecuteQuery<UserPersona>("[Settings].[pGetUserPersonaByGSN]", CommandType.StoredProcedure, parameterGSN);
		
		
			return queryResult;
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "mssql";
			backend.ProviderName = "System.Data.SqlClient";
		
			CustomizeBackendConfiguration(ref backend);
		
			return backend;
		}
		
		/// <summary>
		/// Allows you to customize the BackendConfiguration of UserProfileModel.
		/// </summary>
		/// <param name="config">The BackendConfiguration of UserProfileModel.</param>
		static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);
		
	}
	
	public interface IUserProfileModelUnitOfWork : IUnitOfWork
	{
		IQueryable<KPI> KPIs
		{
			get;
		}
		IQueryable<Brand> Brands
		{
			get;
		}
		IQueryable<BusinessUnit> BusinessUnits
		{
			get;
		}
		IQueryable<Role> Roles
		{
			get;
		}
		IQueryable<Region> Regions
		{
			get;
		}
		IQueryable<UserInBranch> UserInBranches
		{
			get;
		}
		IQueryable<UPSSyncConfig> UPSSyncConfigs
		{
			get;
		}
		IQueryable<UserInRole> UserInRoles
		{
			get;
		}
		IQueryable<Job> Jobs
		{
			get;
		}
		IQueryable<Branch> Branches
		{
			get;
		}
		IQueryable<UserCan> UserCans
		{
			get;
		}
		IQueryable<UserBranchTradeMark> UserBranchTradeMarks
		{
			get;
		}
		IQueryable<FactOFDDailyMetric> FactOFDDailyMetrics
		{
			get;
		}
		IQueryable<DimBranchPlan> DimBranchPlans
		{
			get;
		}
		IQueryable<TransMTDDay> TransMTDDays
		{
			get;
		}
		IQueryable<Material> Materials
		{
			get;
		}
		IQueryable<BranchMaterial> BranchMaterials
		{
			get;
		}
		IQueryable<RegionalChain> RegionalChains
		{
			get;
		}
		IQueryable<NationalChain> NationalChains
		{
			get;
		}
		IQueryable<LocalChain> LocalChains
		{
			get;
		}
		IQueryable<UserGeoRelevancy> UserGeoRelevancies
		{
			get;
		}
		IQueryable<ChainHier> ChainHiers
		{
			get;
		}
		IQueryable<LocationChain> LocationChains
		{
			get;
		}
		IQueryable<Area> Areas
		{
			get;
		}
		IQueryable<RoleSystem> RoleSystems
		{
			get;
		}
		IQueryable<Route> Routes
		{
			get;
		}
		IQueryable<UserRoute> UserRoutes
		{
			get;
		}
		IQueryable<AlertNotificationLastAccessDatetime> AlertNotificationLastAccessDatetimes
		{
			get;
		}
		IQueryable<NationalChainMaster> NationalChainMasters
		{
			get;
		}
		IQueryable<UserNationalChain> UserNationalChains
		{
			get;
		}
		IQueryable<ConsumptionLog_OFD> ConsumptionLog_OFDs
		{
			get;
		}
		IQueryable<UserAccountMapping> UserAccountMappings
		{
			get;
		}
		IQueryable<VBottlerSalesHier> VBottlerSalesHiers
		{
			get;
		}
		IQueryable<Region1> Region1
		{
			get;
		}
		IQueryable<Bcsalesaccountability> Bcsalesaccountabilities
		{
			get;
		}
		IQueryable<UserLocation> UserLocations
		{
			get;
		}
		IQueryable<UserChannel> UserChannels
		{
			get;
		}
		IQueryable<UserAccount> UserAccounts
		{
			get;
		}
		IQueryable<SPUserProfile> SPUserProfiles
		{
			get;
		}
		IQueryable<Plant> Plants
		{
			get;
		}
		IQueryable<MeasursType> MeasursTypes
		{
			get;
		}
		IQueryable<Department> Departments
		{
			get;
		}
		IQueryable<MyPlant> MyPlants
		{
			get;
		}
		IQueryable<UserProductLine> UserProductLines
		{
			get;
		}
		IQueryable<TradeMark> TradeMarks
		{
			get;
		}
		IEnumerable<UserPersona> GetUserPersonaByGSN(string gSN);
	}
}
#pragma warning restore 1591
