#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ContextGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using DPSG.Portal.Framework.SDM;

namespace DPSG.Portal.Framework.SDM	
{
	public partial class PlaybookEntities : OpenAccessContext, IPlaybookEntitiesUnitOfWork
	{
		private static string connectionStringName = @"Portal_DataConnection";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
				
		private static MetadataSource metadataSource = XmlMetadataSource.FromAssemblyResource("PlaybookModel.rlinq");
		
		public PlaybookEntities()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public PlaybookEntities(string connection)
			:base(connection, backend, metadataSource)
		{ }
		
		public PlaybookEntities(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public PlaybookEntities(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public PlaybookEntities(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<PBPromotionAccount> PBPromotionAccounts 
		{
			get
			{
				return this.GetAll<PBPromotionAccount>();
			}
		}
		
		public IQueryable<PBPromotionBrand> PBPromotionBrands 
		{
			get
			{
				return this.GetAll<PBPromotionBrand>();
			}
		}
		
		public IQueryable<PBPromotionPackage> PBPromotionPackages 
		{
			get
			{
				return this.GetAll<PBPromotionPackage>();
			}
		}
		
		public IQueryable<PBPackage> PBPackages 
		{
			get
			{
				return this.GetAll<PBPackage>();
			}
		}
		
		public IQueryable<PBPackageType> PBPackageTypes 
		{
			get
			{
				return this.GetAll<PBPackageType>();
			}
		}
		
		public IQueryable<PBBrand> PBBrands 
		{
			get
			{
				return this.GetAll<PBBrand>();
			}
		}
		
		public IQueryable<PBPromotionAttachment> PBPromotionAttachments 
		{
			get
			{
				return this.GetAll<PBPromotionAttachment>();
			}
		}
		
		public IQueryable<PBPromotionRank> PBPromotionRanks 
		{
			get
			{
				return this.GetAll<PBPromotionRank>();
			}
		}
		
		public IQueryable<PBAttachmentType> PBAttachmentTypes 
		{
			get
			{
				return this.GetAll<PBAttachmentType>();
			}
		}
		
		public IQueryable<PBPromotionType> PBPromotionTypes 
		{
			get
			{
				return this.GetAll<PBPromotionType>();
			}
		}
		
		public IQueryable<PBPromotionCategory> PBPromotionCategories 
		{
			get
			{
				return this.GetAll<PBPromotionCategory>();
			}
		}
		
		public IQueryable<PBDisplayLocation> PBDisplayLocations 
		{
			get
			{
				return this.GetAll<PBDisplayLocation>();
			}
		}
		
		public IQueryable<PBPromotionGeographic> PBPromotionGeographics 
		{
			get
			{
				return this.GetAll<PBPromotionGeographic>();
			}
		}
		
		public IQueryable<PBUserInformation> PBUserInformations 
		{
			get
			{
				return this.GetAll<PBUserInformation>();
			}
		}
		
		public IQueryable<PBCustomCategory> PBCustomCategories 
		{
			get
			{
				return this.GetAll<PBCustomCategory>();
			}
		}
		
		public IQueryable<PBCategory> PBCategories 
		{
			get
			{
				return this.GetAll<PBCategory>();
			}
		}
		
		public IQueryable<PBBusinessUnit> PBBusinessUnits 
		{
			get
			{
				return this.GetAll<PBBusinessUnit>();
			}
		}
		
		public IQueryable<PBTradeMark> PBTradeMarks 
		{
			get
			{
				return this.GetAll<PBTradeMark>();
			}
		}
		
		public IQueryable<PBCustomCategoryPackage> PBCustomCategoryPackages 
		{
			get
			{
				return this.GetAll<PBCustomCategoryPackage>();
			}
		}
		
		public IQueryable<PBRegionalChain> PBRegionalChains 
		{
			get
			{
				return this.GetAll<PBRegionalChain>();
			}
		}
		
		public IQueryable<PBNationalChain> PBNationalChains 
		{
			get
			{
				return this.GetAll<PBNationalChain>();
			}
		}
		
		public IQueryable<PBLocalChain> PBLocalChains 
		{
			get
			{
				return this.GetAll<PBLocalChain>();
			}
		}
		
		public IQueryable<PBRPLItem> PBRPLItems 
		{
			get
			{
				return this.GetAll<PBRPLItem>();
			}
		}
		
		public IQueryable<PBChainHier> PBChainHiers 
		{
			get
			{
				return this.GetAll<PBChainHier>();
			}
		}
		
		public IQueryable<PBLocationChannel> PBLocationChannels 
		{
			get
			{
				return this.GetAll<PBLocationChannel>();
			}
		}
		
		public IQueryable<PBUserChannel> PBUserChannels 
		{
			get
			{
				return this.GetAll<PBUserChannel>();
			}
		}
		
		public IQueryable<PBUserPreference> PBUserPreferences 
		{
			get
			{
				return this.GetAll<PBUserPreference>();
			}
		}
		
		public IQueryable<PBPromotionChannel> PBPromotionChannels 
		{
			get
			{
				return this.GetAll<PBPromotionChannel>();
			}
		}
		
		public IQueryable<PBChannelHier> PBChannelHiers 
		{
			get
			{
				return this.GetAll<PBChannelHier>();
			}
		}
		
		public IQueryable<PBUserGeographic> PBUserGeographics 
		{
			get
			{
				return this.GetAll<PBUserGeographic>();
			}
		}
		
		public IQueryable<PBPromotionSystem> PBPromotionSystems 
		{
			get
			{
				return this.GetAll<PBPromotionSystem>();
			}
		}
		
		public IQueryable<PBProgramTrademark> PBProgramTrademarks 
		{
			get
			{
				return this.GetAll<PBProgramTrademark>();
			}
		}
		
		public IQueryable<PBProgramSystem> PBProgramSystems 
		{
			get
			{
				return this.GetAll<PBProgramSystem>();
			}
		}
		
		public IQueryable<PBProgramAccount> PBProgramAccounts 
		{
			get
			{
				return this.GetAll<PBProgramAccount>();
			}
		}
		
		public IQueryable<PBProgram> PBPrograms 
		{
			get
			{
				return this.GetAll<PBProgram>();
			}
		}
		
		public IQueryable<PBProgramPackage> PBProgramPackages 
		{
			get
			{
				return this.GetAll<PBProgramPackage>();
			}
		}
		
		public IQueryable<PBUserAccount> PBUserAccounts 
		{
			get
			{
				return this.GetAll<PBUserAccount>();
			}
		}
		
		public IQueryable<PBProgramMilestoneAttachment> PBProgramMilestoneAttachments 
		{
			get
			{
				return this.GetAll<PBProgramMilestoneAttachment>();
			}
		}
		
		public IQueryable<PBProgramMilestone> PBProgramMilestones 
		{
			get
			{
				return this.GetAll<PBProgramMilestone>();
			}
		}
		
		public IQueryable<PBMilestone> PBMilestones 
		{
			get
			{
				return this.GetAll<PBMilestone>();
			}
		}
		
		public IQueryable<PBStatusNationalAccount> PBStatusNationalAccounts 
		{
			get
			{
				return this.GetAll<PBStatusNationalAccount>();
			}
		}
		
		public IQueryable<PBStatus> PBStatus 
		{
			get
			{
				return this.GetAll<PBStatus>();
			}
		}
		
		public IQueryable<PBSystem> PBSystems 
		{
			get
			{
				return this.GetAll<PBSystem>();
			}
		}
		
		public IQueryable<PBPromotionAttachmentSystem> PBPromotionAttachmentSystems 
		{
			get
			{
				return this.GetAll<PBPromotionAttachmentSystem>();
			}
		}
		
		public IQueryable<PBLocationHier> PBLocationHiers 
		{
			get
			{
				return this.GetAll<PBLocationHier>();
			}
		}
		
		public IQueryable<PBRoleSystem> PBRoleSystems 
		{
			get
			{
				return this.GetAll<PBRoleSystem>();
			}
		}
		
		public IQueryable<PBMassUploadPromotion> PBMassUploadPromotions 
		{
			get
			{
				return this.GetAll<PBMassUploadPromotion>();
			}
		}
		
		public IQueryable<PBStgMassUploadAttachment> PBStgMassUploadAttachments 
		{
			get
			{
				return this.GetAll<PBStgMassUploadAttachment>();
			}
		}
		
		public IQueryable<PBMassUploadPromoAudit> PBMassUploadPromoAudits 
		{
			get
			{
				return this.GetAll<PBMassUploadPromoAudit>();
			}
		}
		
		public IQueryable<PBCategoryBrandPackage> PBCategoryBrandPackages 
		{
			get
			{
				return this.GetAll<PBCategoryBrandPackage>();
			}
		}
		
		public IQueryable<PBAccountMilestone> PBAccountMilestones 
		{
			get
			{
				return this.GetAll<PBAccountMilestone>();
			}
		}
		
		public IQueryable<PBVBottlerSalesHier> PBVBottlerSalesHiers 
		{
			get
			{
				return this.GetAll<PBVBottlerSalesHier>();
			}
		}
		
		public IQueryable<PBRetailPromotion> PBRetailPromotions 
		{
			get
			{
				return this.GetAll<PBRetailPromotion>();
			}
		}
		
		public IQueryable<PBTLocationChain> PBTLocationChains 
		{
			get
			{
				return this.GetAll<PBTLocationChain>();
			}
		}
		
		public IQueryable<PBBottler> PBBottlers 
		{
			get
			{
				return this.GetAll<PBBottler>();
			}
		}
		
		public IQueryable<PBPromotionGeoRelevancy> PBPromotionGeoRelevancies 
		{
			get
			{
				return this.GetAll<PBPromotionGeoRelevancy>();
			}
		}
		
		public IQueryable<PBPromotionDisplayLocation> PBPromotionDisplayLocations 
		{
			get
			{
				return this.GetAll<PBPromotionDisplayLocation>();
			}
		}
		
		public IQueryable<PBTRegionChain> PBTRegionChains 
		{
			get
			{
				return this.GetAll<PBTRegionChain>();
			}
		}
		
		public IQueryable<PBDisplayType> PBDisplayTypes 
		{
			get
			{
				return this.GetAll<PBDisplayType>();
			}
		}
		
		public IQueryable<PBDepartment> PBDepartments 
		{
			get
			{
				return this.GetAll<PBDepartment>();
			}
		}
		
		public IQueryable<PBSPUserProfile> PBSPUserProfiles 
		{
			get
			{
				return this.GetAll<PBSPUserProfile>();
			}
		}
		
		public IQueryable<PBMaterial> PBMaterials 
		{
			get
			{
				return this.GetAll<PBMaterial>();
			}
		}
		
		public IQueryable<PBCustomCategory1> PBCustomCategory1 
		{
			get
			{
				return this.GetAll<PBCustomCategory1>();
			}
		}
		
		public int PCreatePromotionCopies(int? promotionID)
		{
			OAParameter parameterPromotionID = new OAParameter();
			parameterPromotionID.ParameterName = "PromotionID";
			if(promotionID.HasValue)
			{
				parameterPromotionID.Value = promotionID.Value;
			}
			else
			{
				parameterPromotionID.DbType = DbType.Int32;
				parameterPromotionID.Value = DBNull.Value;
			}

			int queryResult = this.ExecuteNonQuery("[PlayBook].[pCreatePromotionCopies]", CommandType.StoredProcedure, parameterPromotionID);
		
		
			return queryResult;
		}
		
		public int PInsertUpdatePromotion(string mode, int? promotionID, string promotionDescription, string promotionName, int? promotionTypeID, string gEOInfo, string accountInfo, string channelInfo, string stateXML, int? accountId, int? edgeItemId, bool? isLocalized, string promotionTradeMarkID, string promotionBrandId, string promotionPackageID, string promotionPrice, int? promotionCategoryId, int? promotionDisplayLocationId, string promotionDisplayLocationOther, string promotionDisplayRequirement, DateTime? promotionStartDate, DateTime? promotionEndDate, string promotionStatus, string systemID, int? parentPromoId, bool? isNewVersion, string forecastVolume, string nationalDisplayTarget, string bottlerCommitment, int? branchId, int? bUID, int? regionId, string createdBy, string modifiedBy, string accountImageName, int? promotionGroupID, int? programId, string bestBets, string edgeComments, bool? isNationalPromotion, DateTime? promotionDisplayStartDate, DateTime? promotionDisplayEndDate, DateTime? promotionPricingStartDate, DateTime? promotionPricingEndDate, string variableRPC, int? redemption, string fixedCost, string accrualComments, string unit, string accounting, bool? isSMA, bool? isCostPerStore, string tPMNumberCASO, string tPMNumberPASO, string tPMNumberISO, string tPMNumberPB, string roleName, int? promotionDisplayTypeId, int? personaID, string cOSTPerStore, ref int? status, ref string message, ref int? newPromoId, string informationCategory)
		{
			int returnValue;
			return PInsertUpdatePromotion(mode, promotionID, promotionDescription, promotionName, promotionTypeID, gEOInfo, accountInfo, channelInfo, stateXML, accountId, edgeItemId, isLocalized, promotionTradeMarkID, promotionBrandId, promotionPackageID, promotionPrice, promotionCategoryId, promotionDisplayLocationId, promotionDisplayLocationOther, promotionDisplayRequirement, promotionStartDate, promotionEndDate, promotionStatus, systemID, parentPromoId, isNewVersion, forecastVolume, nationalDisplayTarget, bottlerCommitment, branchId, bUID, regionId, createdBy, modifiedBy, accountImageName, promotionGroupID, programId, bestBets, edgeComments, isNationalPromotion, promotionDisplayStartDate, promotionDisplayEndDate, promotionPricingStartDate, promotionPricingEndDate, variableRPC, redemption, fixedCost, accrualComments, unit, accounting, isSMA, isCostPerStore, tPMNumberCASO, tPMNumberPASO, tPMNumberISO, tPMNumberPB, roleName, promotionDisplayTypeId, personaID, cOSTPerStore, ref status, ref message, ref newPromoId, informationCategory, out returnValue);
		}
		
		public int PInsertUpdatePromotion(string mode, int? promotionID, string promotionDescription, string promotionName, int? promotionTypeID, string gEOInfo, string accountInfo, string channelInfo, string stateXML, int? accountId, int? edgeItemId, bool? isLocalized, string promotionTradeMarkID, string promotionBrandId, string promotionPackageID, string promotionPrice, int? promotionCategoryId, int? promotionDisplayLocationId, string promotionDisplayLocationOther, string promotionDisplayRequirement, DateTime? promotionStartDate, DateTime? promotionEndDate, string promotionStatus, string systemID, int? parentPromoId, bool? isNewVersion, string forecastVolume, string nationalDisplayTarget, string bottlerCommitment, int? branchId, int? bUID, int? regionId, string createdBy, string modifiedBy, string accountImageName, int? promotionGroupID, int? programId, string bestBets, string edgeComments, bool? isNationalPromotion, DateTime? promotionDisplayStartDate, DateTime? promotionDisplayEndDate, DateTime? promotionPricingStartDate, DateTime? promotionPricingEndDate, string variableRPC, int? redemption, string fixedCost, string accrualComments, string unit, string accounting, bool? isSMA, bool? isCostPerStore, string tPMNumberCASO, string tPMNumberPASO, string tPMNumberISO, string tPMNumberPB, string roleName, int? promotionDisplayTypeId, int? personaID, string cOSTPerStore, ref int? status, ref string message, ref int? newPromoId, string informationCategory, out int returnValue)
		{
			OAParameter parameterReturnValue = new OAParameter();
		    parameterReturnValue.Direction = ParameterDirection.ReturnValue;
		    parameterReturnValue.ParameterName = "parameterReturnValue";
		
			OAParameter parameterMode = new OAParameter();
			parameterMode.ParameterName = "Mode";
			parameterMode.Size = 500;
			if(mode != null)
			{
				parameterMode.Value = mode;
			}	
			else
			{
				parameterMode.DbType = DbType.String;
				parameterMode.Value = DBNull.Value;
			}

			OAParameter parameterPromotionID = new OAParameter();
			parameterPromotionID.ParameterName = "PromotionID";
			if(promotionID.HasValue)
			{
				parameterPromotionID.Value = promotionID.Value;
			}
			else
			{
				parameterPromotionID.DbType = DbType.Int32;
				parameterPromotionID.Value = DBNull.Value;
			}

			OAParameter parameterPromotionDescription = new OAParameter();
			parameterPromotionDescription.ParameterName = "PromotionDescription";
			parameterPromotionDescription.Size = 500;
			if(promotionDescription != null)
			{
				parameterPromotionDescription.Value = promotionDescription;
			}	
			else
			{
				parameterPromotionDescription.DbType = DbType.String;
				parameterPromotionDescription.Value = DBNull.Value;
			}

			OAParameter parameterPromotionName = new OAParameter();
			parameterPromotionName.ParameterName = "PromotionName";
			parameterPromotionName.Size = 500;
			if(promotionName != null)
			{
				parameterPromotionName.Value = promotionName;
			}	
			else
			{
				parameterPromotionName.DbType = DbType.String;
				parameterPromotionName.Value = DBNull.Value;
			}

			OAParameter parameterPromotionTypeID = new OAParameter();
			parameterPromotionTypeID.ParameterName = "PromotionTypeID";
			if(promotionTypeID.HasValue)
			{
				parameterPromotionTypeID.Value = promotionTypeID.Value;
			}
			else
			{
				parameterPromotionTypeID.DbType = DbType.Int32;
				parameterPromotionTypeID.Value = DBNull.Value;
			}

			OAParameter parameterGEOInfo = new OAParameter();
			parameterGEOInfo.ParameterName = "GEOInfo";
			parameterGEOInfo.Size = -1;
			if(gEOInfo != null)
			{
				parameterGEOInfo.Value = gEOInfo;
			}	
			else
			{
				parameterGEOInfo.DbType = DbType.String;
				parameterGEOInfo.Value = DBNull.Value;
			}

			OAParameter parameterAccountInfo = new OAParameter();
			parameterAccountInfo.ParameterName = "AccountInfo";
			parameterAccountInfo.Size = -1;
			if(accountInfo != null)
			{
				parameterAccountInfo.Value = accountInfo;
			}	
			else
			{
				parameterAccountInfo.DbType = DbType.String;
				parameterAccountInfo.Value = DBNull.Value;
			}

			OAParameter parameterChannelInfo = new OAParameter();
			parameterChannelInfo.ParameterName = "ChannelInfo";
			parameterChannelInfo.Size = -1;
			if(channelInfo != null)
			{
				parameterChannelInfo.Value = channelInfo;
			}	
			else
			{
				parameterChannelInfo.DbType = DbType.String;
				parameterChannelInfo.Value = DBNull.Value;
			}

			OAParameter parameterStateXML = new OAParameter();
			parameterStateXML.ParameterName = "StateXML";
			parameterStateXML.Size = -1;
			if(stateXML != null)
			{
				parameterStateXML.Value = stateXML;
			}	
			else
			{
				parameterStateXML.DbType = DbType.String;
				parameterStateXML.Value = DBNull.Value;
			}

			OAParameter parameterAccountId = new OAParameter();
			parameterAccountId.ParameterName = "AccountId";
			if(accountId.HasValue)
			{
				parameterAccountId.Value = accountId.Value;
			}
			else
			{
				parameterAccountId.DbType = DbType.Int32;
				parameterAccountId.Value = DBNull.Value;
			}

			OAParameter parameterEdgeItemId = new OAParameter();
			parameterEdgeItemId.ParameterName = "EdgeItemId";
			if(edgeItemId.HasValue)
			{
				parameterEdgeItemId.Value = edgeItemId.Value;
			}
			else
			{
				parameterEdgeItemId.DbType = DbType.Int32;
				parameterEdgeItemId.Value = DBNull.Value;
			}

			OAParameter parameterIsLocalized = new OAParameter();
			parameterIsLocalized.ParameterName = "IsLocalized";
			if(isLocalized.HasValue)
			{
				parameterIsLocalized.Value = isLocalized.Value;
			}
			else
			{
				parameterIsLocalized.DbType = DbType.Boolean;
				parameterIsLocalized.Value = DBNull.Value;
			}

			OAParameter parameterPromotionTradeMarkID = new OAParameter();
			parameterPromotionTradeMarkID.ParameterName = "PromotionTradeMarkID";
			parameterPromotionTradeMarkID.Size = 500;
			if(promotionTradeMarkID != null)
			{
				parameterPromotionTradeMarkID.Value = promotionTradeMarkID;
			}	
			else
			{
				parameterPromotionTradeMarkID.DbType = DbType.String;
				parameterPromotionTradeMarkID.Value = DBNull.Value;
			}

			OAParameter parameterPromotionBrandId = new OAParameter();
			parameterPromotionBrandId.ParameterName = "PromotionBrandId";
			parameterPromotionBrandId.Size = 500;
			if(promotionBrandId != null)
			{
				parameterPromotionBrandId.Value = promotionBrandId;
			}	
			else
			{
				parameterPromotionBrandId.DbType = DbType.String;
				parameterPromotionBrandId.Value = DBNull.Value;
			}

			OAParameter parameterPromotionPackageID = new OAParameter();
			parameterPromotionPackageID.ParameterName = "PromotionPackageID";
			parameterPromotionPackageID.Size = 500;
			if(promotionPackageID != null)
			{
				parameterPromotionPackageID.Value = promotionPackageID;
			}	
			else
			{
				parameterPromotionPackageID.DbType = DbType.String;
				parameterPromotionPackageID.Value = DBNull.Value;
			}

			OAParameter parameterPromotionPrice = new OAParameter();
			parameterPromotionPrice.ParameterName = "PromotionPrice";
			parameterPromotionPrice.Size = 500;
			if(promotionPrice != null)
			{
				parameterPromotionPrice.Value = promotionPrice;
			}	
			else
			{
				parameterPromotionPrice.DbType = DbType.String;
				parameterPromotionPrice.Value = DBNull.Value;
			}

			OAParameter parameterPromotionCategoryId = new OAParameter();
			parameterPromotionCategoryId.ParameterName = "PromotionCategoryId";
			if(promotionCategoryId.HasValue)
			{
				parameterPromotionCategoryId.Value = promotionCategoryId.Value;
			}
			else
			{
				parameterPromotionCategoryId.DbType = DbType.Int32;
				parameterPromotionCategoryId.Value = DBNull.Value;
			}

			OAParameter parameterPromotionDisplayLocationId = new OAParameter();
			parameterPromotionDisplayLocationId.ParameterName = "PromotionDisplayLocationId";
			if(promotionDisplayLocationId.HasValue)
			{
				parameterPromotionDisplayLocationId.Value = promotionDisplayLocationId.Value;
			}
			else
			{
				parameterPromotionDisplayLocationId.DbType = DbType.Int32;
				parameterPromotionDisplayLocationId.Value = DBNull.Value;
			}

			OAParameter parameterPromotionDisplayLocationOther = new OAParameter();
			parameterPromotionDisplayLocationOther.ParameterName = "PromotionDisplayLocationOther";
			parameterPromotionDisplayLocationOther.Size = 500;
			if(promotionDisplayLocationOther != null)
			{
				parameterPromotionDisplayLocationOther.Value = promotionDisplayLocationOther;
			}	
			else
			{
				parameterPromotionDisplayLocationOther.DbType = DbType.String;
				parameterPromotionDisplayLocationOther.Value = DBNull.Value;
			}

			OAParameter parameterPromotionDisplayRequirement = new OAParameter();
			parameterPromotionDisplayRequirement.ParameterName = "PromotionDisplayRequirement";
			parameterPromotionDisplayRequirement.Size = 20;
			if(promotionDisplayRequirement != null)
			{
				parameterPromotionDisplayRequirement.Value = promotionDisplayRequirement;
			}	
			else
			{
				parameterPromotionDisplayRequirement.DbType = DbType.String;
				parameterPromotionDisplayRequirement.Value = DBNull.Value;
			}

			OAParameter parameterPromotionStartDate = new OAParameter();
			parameterPromotionStartDate.ParameterName = "PromotionStartDate";
			if(promotionStartDate.HasValue)
			{
				parameterPromotionStartDate.Value = promotionStartDate.Value;
			}
			else
			{
				parameterPromotionStartDate.DbType = DbType.DateTime;
				parameterPromotionStartDate.Value = DBNull.Value;
			}

			OAParameter parameterPromotionEndDate = new OAParameter();
			parameterPromotionEndDate.ParameterName = "PromotionEndDate";
			if(promotionEndDate.HasValue)
			{
				parameterPromotionEndDate.Value = promotionEndDate.Value;
			}
			else
			{
				parameterPromotionEndDate.DbType = DbType.DateTime;
				parameterPromotionEndDate.Value = DBNull.Value;
			}

			OAParameter parameterPromotionStatus = new OAParameter();
			parameterPromotionStatus.ParameterName = "PromotionStatus";
			parameterPromotionStatus.Size = 500;
			if(promotionStatus != null)
			{
				parameterPromotionStatus.Value = promotionStatus;
			}	
			else
			{
				parameterPromotionStatus.DbType = DbType.String;
				parameterPromotionStatus.Value = DBNull.Value;
			}

			OAParameter parameterSystemID = new OAParameter();
			parameterSystemID.ParameterName = "SystemID";
			parameterSystemID.Size = 500;
			if(systemID != null)
			{
				parameterSystemID.Value = systemID;
			}	
			else
			{
				parameterSystemID.DbType = DbType.String;
				parameterSystemID.Value = DBNull.Value;
			}

			OAParameter parameterParentPromoId = new OAParameter();
			parameterParentPromoId.ParameterName = "ParentPromoId";
			if(parentPromoId.HasValue)
			{
				parameterParentPromoId.Value = parentPromoId.Value;
			}
			else
			{
				parameterParentPromoId.DbType = DbType.Int32;
				parameterParentPromoId.Value = DBNull.Value;
			}

			OAParameter parameterIsNewVersion = new OAParameter();
			parameterIsNewVersion.ParameterName = "IsNewVersion";
			if(isNewVersion.HasValue)
			{
				parameterIsNewVersion.Value = isNewVersion.Value;
			}
			else
			{
				parameterIsNewVersion.DbType = DbType.Boolean;
				parameterIsNewVersion.Value = DBNull.Value;
			}

			OAParameter parameterForecastVolume = new OAParameter();
			parameterForecastVolume.ParameterName = "ForecastVolume";
			parameterForecastVolume.Size = 500;
			if(forecastVolume != null)
			{
				parameterForecastVolume.Value = forecastVolume;
			}	
			else
			{
				parameterForecastVolume.DbType = DbType.String;
				parameterForecastVolume.Value = DBNull.Value;
			}

			OAParameter parameterNationalDisplayTarget = new OAParameter();
			parameterNationalDisplayTarget.ParameterName = "NationalDisplayTarget";
			parameterNationalDisplayTarget.Size = 500;
			if(nationalDisplayTarget != null)
			{
				parameterNationalDisplayTarget.Value = nationalDisplayTarget;
			}	
			else
			{
				parameterNationalDisplayTarget.DbType = DbType.String;
				parameterNationalDisplayTarget.Value = DBNull.Value;
			}

			OAParameter parameterBottlerCommitment = new OAParameter();
			parameterBottlerCommitment.ParameterName = "BottlerCommitment";
			parameterBottlerCommitment.Size = 500;
			if(bottlerCommitment != null)
			{
				parameterBottlerCommitment.Value = bottlerCommitment;
			}	
			else
			{
				parameterBottlerCommitment.DbType = DbType.String;
				parameterBottlerCommitment.Value = DBNull.Value;
			}

			OAParameter parameterBranchId = new OAParameter();
			parameterBranchId.ParameterName = "BranchId";
			if(branchId.HasValue)
			{
				parameterBranchId.Value = branchId.Value;
			}
			else
			{
				parameterBranchId.DbType = DbType.Int32;
				parameterBranchId.Value = DBNull.Value;
			}

			OAParameter parameterBUID = new OAParameter();
			parameterBUID.ParameterName = "BUID";
			if(bUID.HasValue)
			{
				parameterBUID.Value = bUID.Value;
			}
			else
			{
				parameterBUID.DbType = DbType.Int32;
				parameterBUID.Value = DBNull.Value;
			}

			OAParameter parameterRegionId = new OAParameter();
			parameterRegionId.ParameterName = "RegionId";
			if(regionId.HasValue)
			{
				parameterRegionId.Value = regionId.Value;
			}
			else
			{
				parameterRegionId.DbType = DbType.Int32;
				parameterRegionId.Value = DBNull.Value;
			}

			OAParameter parameterCreatedBy = new OAParameter();
			parameterCreatedBy.ParameterName = "CreatedBy";
			parameterCreatedBy.Size = 500;
			if(createdBy != null)
			{
				parameterCreatedBy.Value = createdBy;
			}	
			else
			{
				parameterCreatedBy.DbType = DbType.String;
				parameterCreatedBy.Value = DBNull.Value;
			}

			OAParameter parameterModifiedBy = new OAParameter();
			parameterModifiedBy.ParameterName = "ModifiedBy";
			parameterModifiedBy.Size = 500;
			if(modifiedBy != null)
			{
				parameterModifiedBy.Value = modifiedBy;
			}	
			else
			{
				parameterModifiedBy.DbType = DbType.String;
				parameterModifiedBy.Value = DBNull.Value;
			}

			OAParameter parameterAccountImageName = new OAParameter();
			parameterAccountImageName.ParameterName = "AccountImageName";
			parameterAccountImageName.Size = 50;
			if(accountImageName != null)
			{
				parameterAccountImageName.Value = accountImageName;
			}	
			else
			{
				parameterAccountImageName.DbType = DbType.String;
				parameterAccountImageName.Value = DBNull.Value;
			}

			OAParameter parameterPromotionGroupID = new OAParameter();
			parameterPromotionGroupID.ParameterName = "PromotionGroupID";
			if(promotionGroupID.HasValue)
			{
				parameterPromotionGroupID.Value = promotionGroupID.Value;
			}
			else
			{
				parameterPromotionGroupID.DbType = DbType.Int32;
				parameterPromotionGroupID.Value = DBNull.Value;
			}

			OAParameter parameterProgramId = new OAParameter();
			parameterProgramId.ParameterName = "ProgramId";
			if(programId.HasValue)
			{
				parameterProgramId.Value = programId.Value;
			}
			else
			{
				parameterProgramId.DbType = DbType.Int32;
				parameterProgramId.Value = DBNull.Value;
			}

			OAParameter parameterBestBets = new OAParameter();
			parameterBestBets.ParameterName = "BestBets";
			parameterBestBets.Size = 48;
			if(bestBets != null)
			{
				parameterBestBets.Value = bestBets;
			}	
			else
			{
				parameterBestBets.DbType = DbType.String;
				parameterBestBets.Value = DBNull.Value;
			}

			OAParameter parameterEdgeComments = new OAParameter();
			parameterEdgeComments.ParameterName = "EdgeComments";
			parameterEdgeComments.Size = 250;
			if(edgeComments != null)
			{
				parameterEdgeComments.Value = edgeComments;
			}	
			else
			{
				parameterEdgeComments.DbType = DbType.String;
				parameterEdgeComments.Value = DBNull.Value;
			}

			OAParameter parameterIsNationalPromotion = new OAParameter();
			parameterIsNationalPromotion.ParameterName = "IsNationalPromotion";
			if(isNationalPromotion.HasValue)
			{
				parameterIsNationalPromotion.Value = isNationalPromotion.Value;
			}
			else
			{
				parameterIsNationalPromotion.DbType = DbType.Boolean;
				parameterIsNationalPromotion.Value = DBNull.Value;
			}

			OAParameter parameterPromotionDisplayStartDate = new OAParameter();
			parameterPromotionDisplayStartDate.ParameterName = "PromotionDisplayStartDate";
			if(promotionDisplayStartDate.HasValue)
			{
				parameterPromotionDisplayStartDate.Value = promotionDisplayStartDate.Value;
			}
			else
			{
				parameterPromotionDisplayStartDate.DbType = DbType.DateTime;
				parameterPromotionDisplayStartDate.Value = DBNull.Value;
			}

			OAParameter parameterPromotionDisplayEndDate = new OAParameter();
			parameterPromotionDisplayEndDate.ParameterName = "PromotionDisplayEndDate";
			if(promotionDisplayEndDate.HasValue)
			{
				parameterPromotionDisplayEndDate.Value = promotionDisplayEndDate.Value;
			}
			else
			{
				parameterPromotionDisplayEndDate.DbType = DbType.DateTime;
				parameterPromotionDisplayEndDate.Value = DBNull.Value;
			}

			OAParameter parameterPromotionPricingStartDate = new OAParameter();
			parameterPromotionPricingStartDate.ParameterName = "PromotionPricingStartDate";
			if(promotionPricingStartDate.HasValue)
			{
				parameterPromotionPricingStartDate.Value = promotionPricingStartDate.Value;
			}
			else
			{
				parameterPromotionPricingStartDate.DbType = DbType.DateTime;
				parameterPromotionPricingStartDate.Value = DBNull.Value;
			}

			OAParameter parameterPromotionPricingEndDate = new OAParameter();
			parameterPromotionPricingEndDate.ParameterName = "PromotionPricingEndDate";
			if(promotionPricingEndDate.HasValue)
			{
				parameterPromotionPricingEndDate.Value = promotionPricingEndDate.Value;
			}
			else
			{
				parameterPromotionPricingEndDate.DbType = DbType.DateTime;
				parameterPromotionPricingEndDate.Value = DBNull.Value;
			}

			OAParameter parameterVariableRPC = new OAParameter();
			parameterVariableRPC.ParameterName = "VariableRPC";
			parameterVariableRPC.Size = 50;
			if(variableRPC != null)
			{
				parameterVariableRPC.Value = variableRPC;
			}	
			else
			{
				parameterVariableRPC.DbType = DbType.String;
				parameterVariableRPC.Value = DBNull.Value;
			}

			OAParameter parameterRedemption = new OAParameter();
			parameterRedemption.ParameterName = "Redemption";
			if(redemption.HasValue)
			{
				parameterRedemption.Value = redemption.Value;
			}
			else
			{
				parameterRedemption.DbType = DbType.Int32;
				parameterRedemption.Value = DBNull.Value;
			}

			OAParameter parameterFixedCost = new OAParameter();
			parameterFixedCost.ParameterName = "FixedCost";
			parameterFixedCost.Size = 50;
			if(fixedCost != null)
			{
				parameterFixedCost.Value = fixedCost;
			}	
			else
			{
				parameterFixedCost.DbType = DbType.String;
				parameterFixedCost.Value = DBNull.Value;
			}

			OAParameter parameterAccrualComments = new OAParameter();
			parameterAccrualComments.ParameterName = "AccrualComments";
			parameterAccrualComments.Size = 500;
			if(accrualComments != null)
			{
				parameterAccrualComments.Value = accrualComments;
			}	
			else
			{
				parameterAccrualComments.DbType = DbType.String;
				parameterAccrualComments.Value = DBNull.Value;
			}

			OAParameter parameterUnit = new OAParameter();
			parameterUnit.ParameterName = "Unit";
			parameterUnit.Size = 50;
			if(unit != null)
			{
				parameterUnit.Value = unit;
			}	
			else
			{
				parameterUnit.DbType = DbType.String;
				parameterUnit.Value = DBNull.Value;
			}

			OAParameter parameterAccounting = new OAParameter();
			parameterAccounting.ParameterName = "Accounting";
			parameterAccounting.Size = 50;
			if(accounting != null)
			{
				parameterAccounting.Value = accounting;
			}	
			else
			{
				parameterAccounting.DbType = DbType.String;
				parameterAccounting.Value = DBNull.Value;
			}

			OAParameter parameterIsSMA = new OAParameter();
			parameterIsSMA.ParameterName = "IsSMA";
			if(isSMA.HasValue)
			{
				parameterIsSMA.Value = isSMA.Value;
			}
			else
			{
				parameterIsSMA.DbType = DbType.Boolean;
				parameterIsSMA.Value = DBNull.Value;
			}

			OAParameter parameterIsCostPerStore = new OAParameter();
			parameterIsCostPerStore.ParameterName = "IsCostPerStore";
			if(isCostPerStore.HasValue)
			{
				parameterIsCostPerStore.Value = isCostPerStore.Value;
			}
			else
			{
				parameterIsCostPerStore.DbType = DbType.Boolean;
				parameterIsCostPerStore.Value = DBNull.Value;
			}

			OAParameter parameterTPMNumberCASO = new OAParameter();
			parameterTPMNumberCASO.ParameterName = "TPMNumberCASO";
			parameterTPMNumberCASO.Size = 20;
			if(tPMNumberCASO != null)
			{
				parameterTPMNumberCASO.Value = tPMNumberCASO;
			}	
			else
			{
				parameterTPMNumberCASO.DbType = DbType.String;
				parameterTPMNumberCASO.Value = DBNull.Value;
			}

			OAParameter parameterTPMNumberPASO = new OAParameter();
			parameterTPMNumberPASO.ParameterName = "TPMNumberPASO";
			parameterTPMNumberPASO.Size = 20;
			if(tPMNumberPASO != null)
			{
				parameterTPMNumberPASO.Value = tPMNumberPASO;
			}	
			else
			{
				parameterTPMNumberPASO.DbType = DbType.String;
				parameterTPMNumberPASO.Value = DBNull.Value;
			}

			OAParameter parameterTPMNumberISO = new OAParameter();
			parameterTPMNumberISO.ParameterName = "TPMNumberISO";
			parameterTPMNumberISO.Size = 20;
			if(tPMNumberISO != null)
			{
				parameterTPMNumberISO.Value = tPMNumberISO;
			}	
			else
			{
				parameterTPMNumberISO.DbType = DbType.String;
				parameterTPMNumberISO.Value = DBNull.Value;
			}

			OAParameter parameterTPMNumberPB = new OAParameter();
			parameterTPMNumberPB.ParameterName = "TPMNumberPB";
			parameterTPMNumberPB.Size = 100;
			if(tPMNumberPB != null)
			{
				parameterTPMNumberPB.Value = tPMNumberPB;
			}	
			else
			{
				parameterTPMNumberPB.DbType = DbType.String;
				parameterTPMNumberPB.Value = DBNull.Value;
			}

			OAParameter parameterRoleName = new OAParameter();
			parameterRoleName.ParameterName = "RoleName";
			parameterRoleName.Size = 50;
			if(roleName != null)
			{
				parameterRoleName.Value = roleName;
			}	
			else
			{
				parameterRoleName.DbType = DbType.String;
				parameterRoleName.Value = DBNull.Value;
			}

			OAParameter parameterPromotionDisplayTypeId = new OAParameter();
			parameterPromotionDisplayTypeId.ParameterName = "PromotionDisplayTypeId";
			if(promotionDisplayTypeId.HasValue)
			{
				parameterPromotionDisplayTypeId.Value = promotionDisplayTypeId.Value;
			}
			else
			{
				parameterPromotionDisplayTypeId.DbType = DbType.Int32;
				parameterPromotionDisplayTypeId.Value = DBNull.Value;
			}

			OAParameter parameterPersonaID = new OAParameter();
			parameterPersonaID.ParameterName = "PersonaID";
			if(personaID.HasValue)
			{
				parameterPersonaID.Value = personaID.Value;
			}
			else
			{
				parameterPersonaID.DbType = DbType.Int32;
				parameterPersonaID.Value = DBNull.Value;
			}

			OAParameter parameterCOSTPerStore = new OAParameter();
			parameterCOSTPerStore.ParameterName = "COSTPerStore";
			parameterCOSTPerStore.Size = 50;
			if(cOSTPerStore != null)
			{
				parameterCOSTPerStore.Value = cOSTPerStore;
			}	
			else
			{
				parameterCOSTPerStore.DbType = DbType.String;
				parameterCOSTPerStore.Value = DBNull.Value;
			}

			OAParameter parameterStatus = new OAParameter();
			parameterStatus.ParameterName = "Status";
			parameterStatus.Direction = ParameterDirection.InputOutput;
			if(status.HasValue)
			{
				parameterStatus.Value = status.Value;
			}
			else
			{
				parameterStatus.DbType = DbType.Int32;
				parameterStatus.Value = DBNull.Value;
			}

			OAParameter parameterMessage = new OAParameter();
			parameterMessage.ParameterName = "Message";
			parameterMessage.Direction = ParameterDirection.InputOutput;
			parameterMessage.Size = 500;
			if(message != null)
			{
				parameterMessage.Value = message;
			}	
			else
			{
				parameterMessage.DbType = DbType.String;
				parameterMessage.Value = DBNull.Value;
			}

			OAParameter parameterNewPromoId = new OAParameter();
			parameterNewPromoId.ParameterName = "NewPromoId";
			parameterNewPromoId.Direction = ParameterDirection.InputOutput;
			if(newPromoId.HasValue)
			{
				parameterNewPromoId.Value = newPromoId.Value;
			}
			else
			{
				parameterNewPromoId.DbType = DbType.Int32;
				parameterNewPromoId.Value = DBNull.Value;
			}

			OAParameter parameterInformationCategory = new OAParameter();
			parameterInformationCategory.ParameterName = "InformationCategory";
			parameterInformationCategory.Size = 100;
			if(informationCategory != null)
			{
				parameterInformationCategory.Value = informationCategory;
			}	
			else
			{
				parameterInformationCategory.DbType = DbType.String;
				parameterInformationCategory.Value = DBNull.Value;
			}

			int queryResult = this.ExecuteNonQuery("[Playbook].[pInsertUpdatePromotion]", CommandType.StoredProcedure, parameterMode, parameterPromotionID, parameterPromotionDescription, parameterPromotionName, parameterPromotionTypeID, parameterGEOInfo, parameterAccountInfo, parameterChannelInfo, parameterStateXML, parameterAccountId, parameterEdgeItemId, parameterIsLocalized, parameterPromotionTradeMarkID, parameterPromotionBrandId, parameterPromotionPackageID, parameterPromotionPrice, parameterPromotionCategoryId, parameterPromotionDisplayLocationId, parameterPromotionDisplayLocationOther, parameterPromotionDisplayRequirement, parameterPromotionStartDate, parameterPromotionEndDate, parameterPromotionStatus, parameterSystemID, parameterParentPromoId, parameterIsNewVersion, parameterForecastVolume, parameterNationalDisplayTarget, parameterBottlerCommitment, parameterBranchId, parameterBUID, parameterRegionId, parameterCreatedBy, parameterModifiedBy, parameterAccountImageName, parameterPromotionGroupID, parameterProgramId, parameterBestBets, parameterEdgeComments, parameterIsNationalPromotion, parameterPromotionDisplayStartDate, parameterPromotionDisplayEndDate, parameterPromotionPricingStartDate, parameterPromotionPricingEndDate, parameterVariableRPC, parameterRedemption, parameterFixedCost, parameterAccrualComments, parameterUnit, parameterAccounting, parameterIsSMA, parameterIsCostPerStore, parameterTPMNumberCASO, parameterTPMNumberPASO, parameterTPMNumberISO, parameterTPMNumberPB, parameterRoleName, parameterPromotionDisplayTypeId, parameterPersonaID, parameterCOSTPerStore, parameterStatus, parameterMessage, parameterNewPromoId, parameterInformationCategory, parameterReturnValue);
		
			returnValue = parameterReturnValue.Value == DBNull.Value 
				? -1
				: (int)parameterReturnValue.Value;
			status = parameterStatus.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterStatus.Value;
			message = parameterMessage.Value == DBNull.Value 
				? default(string) 
				: (string)parameterMessage.Value;
			newPromoId = parameterNewPromoId.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterNewPromoId.Value;
		
			return queryResult;
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "MsSql";
			backend.ProviderName = "System.Data.SqlClient";
			backend.Logging.MetricStoreSnapshotInterval = 0;
			backend.Runtime.LockTimeoutMSec = 100000000;
			backend.Runtime.CompiledQueryCacheSize = 1000000;
		
			CustomizeBackendConfiguration(ref backend);
		
			return backend;
		}
		
		/// <summary>
		/// Allows you to customize the BackendConfiguration of PlaybookEntities.
		/// </summary>
		/// <param name="config">The BackendConfiguration of PlaybookEntities.</param>
		static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);
		
	}
	
	public interface IPlaybookEntitiesUnitOfWork : IUnitOfWork
	{
		IQueryable<PBPromotionAccount> PBPromotionAccounts
		{
			get;
		}
		IQueryable<PBPromotionBrand> PBPromotionBrands
		{
			get;
		}
		IQueryable<PBPromotionPackage> PBPromotionPackages
		{
			get;
		}
		IQueryable<PBPackage> PBPackages
		{
			get;
		}
		IQueryable<PBPackageType> PBPackageTypes
		{
			get;
		}
		IQueryable<PBBrand> PBBrands
		{
			get;
		}
		IQueryable<PBPromotionAttachment> PBPromotionAttachments
		{
			get;
		}
		IQueryable<PBPromotionRank> PBPromotionRanks
		{
			get;
		}
		IQueryable<PBAttachmentType> PBAttachmentTypes
		{
			get;
		}
		IQueryable<PBPromotionType> PBPromotionTypes
		{
			get;
		}
		IQueryable<PBPromotionCategory> PBPromotionCategories
		{
			get;
		}
		IQueryable<PBDisplayLocation> PBDisplayLocations
		{
			get;
		}
		IQueryable<PBPromotionGeographic> PBPromotionGeographics
		{
			get;
		}
		IQueryable<PBUserInformation> PBUserInformations
		{
			get;
		}
		IQueryable<PBCustomCategory> PBCustomCategories
		{
			get;
		}
		IQueryable<PBCategory> PBCategories
		{
			get;
		}
		IQueryable<PBBusinessUnit> PBBusinessUnits
		{
			get;
		}
		IQueryable<PBTradeMark> PBTradeMarks
		{
			get;
		}
		IQueryable<PBCustomCategoryPackage> PBCustomCategoryPackages
		{
			get;
		}
		IQueryable<PBRegionalChain> PBRegionalChains
		{
			get;
		}
		IQueryable<PBNationalChain> PBNationalChains
		{
			get;
		}
		IQueryable<PBLocalChain> PBLocalChains
		{
			get;
		}
		IQueryable<PBRPLItem> PBRPLItems
		{
			get;
		}
		IQueryable<PBChainHier> PBChainHiers
		{
			get;
		}
		IQueryable<PBLocationChannel> PBLocationChannels
		{
			get;
		}
		IQueryable<PBUserChannel> PBUserChannels
		{
			get;
		}
		IQueryable<PBUserPreference> PBUserPreferences
		{
			get;
		}
		IQueryable<PBPromotionChannel> PBPromotionChannels
		{
			get;
		}
		IQueryable<PBChannelHier> PBChannelHiers
		{
			get;
		}
		IQueryable<PBUserGeographic> PBUserGeographics
		{
			get;
		}
		IQueryable<PBPromotionSystem> PBPromotionSystems
		{
			get;
		}
		IQueryable<PBProgramTrademark> PBProgramTrademarks
		{
			get;
		}
		IQueryable<PBProgramSystem> PBProgramSystems
		{
			get;
		}
		IQueryable<PBProgramAccount> PBProgramAccounts
		{
			get;
		}
		IQueryable<PBProgram> PBPrograms
		{
			get;
		}
		IQueryable<PBProgramPackage> PBProgramPackages
		{
			get;
		}
		IQueryable<PBUserAccount> PBUserAccounts
		{
			get;
		}
		IQueryable<PBProgramMilestoneAttachment> PBProgramMilestoneAttachments
		{
			get;
		}
		IQueryable<PBProgramMilestone> PBProgramMilestones
		{
			get;
		}
		IQueryable<PBMilestone> PBMilestones
		{
			get;
		}
		IQueryable<PBStatusNationalAccount> PBStatusNationalAccounts
		{
			get;
		}
		IQueryable<PBStatus> PBStatus
		{
			get;
		}
		IQueryable<PBSystem> PBSystems
		{
			get;
		}
		IQueryable<PBPromotionAttachmentSystem> PBPromotionAttachmentSystems
		{
			get;
		}
		IQueryable<PBLocationHier> PBLocationHiers
		{
			get;
		}
		IQueryable<PBRoleSystem> PBRoleSystems
		{
			get;
		}
		IQueryable<PBMassUploadPromotion> PBMassUploadPromotions
		{
			get;
		}
		IQueryable<PBStgMassUploadAttachment> PBStgMassUploadAttachments
		{
			get;
		}
		IQueryable<PBMassUploadPromoAudit> PBMassUploadPromoAudits
		{
			get;
		}
		IQueryable<PBCategoryBrandPackage> PBCategoryBrandPackages
		{
			get;
		}
		IQueryable<PBAccountMilestone> PBAccountMilestones
		{
			get;
		}
		IQueryable<PBVBottlerSalesHier> PBVBottlerSalesHiers
		{
			get;
		}
		IQueryable<PBRetailPromotion> PBRetailPromotions
		{
			get;
		}
		IQueryable<PBTLocationChain> PBTLocationChains
		{
			get;
		}
		IQueryable<PBBottler> PBBottlers
		{
			get;
		}
		IQueryable<PBPromotionGeoRelevancy> PBPromotionGeoRelevancies
		{
			get;
		}
		IQueryable<PBPromotionDisplayLocation> PBPromotionDisplayLocations
		{
			get;
		}
		IQueryable<PBTRegionChain> PBTRegionChains
		{
			get;
		}
		IQueryable<PBDisplayType> PBDisplayTypes
		{
			get;
		}
		IQueryable<PBDepartment> PBDepartments
		{
			get;
		}
		IQueryable<PBSPUserProfile> PBSPUserProfiles
		{
			get;
		}
		IQueryable<PBMaterial> PBMaterials
		{
			get;
		}
		IQueryable<PBCustomCategory1> PBCustomCategory1
		{
			get;
		}
		int PCreatePromotionCopies(int? promotionID);
		int PInsertUpdatePromotion(string mode, int? promotionID, string promotionDescription, string promotionName, int? promotionTypeID, string gEOInfo, string accountInfo, string channelInfo, string stateXML, int? accountId, int? edgeItemId, bool? isLocalized, string promotionTradeMarkID, string promotionBrandId, string promotionPackageID, string promotionPrice, int? promotionCategoryId, int? promotionDisplayLocationId, string promotionDisplayLocationOther, string promotionDisplayRequirement, DateTime? promotionStartDate, DateTime? promotionEndDate, string promotionStatus, string systemID, int? parentPromoId, bool? isNewVersion, string forecastVolume, string nationalDisplayTarget, string bottlerCommitment, int? branchId, int? bUID, int? regionId, string createdBy, string modifiedBy, string accountImageName, int? promotionGroupID, int? programId, string bestBets, string edgeComments, bool? isNationalPromotion, DateTime? promotionDisplayStartDate, DateTime? promotionDisplayEndDate, DateTime? promotionPricingStartDate, DateTime? promotionPricingEndDate, string variableRPC, int? redemption, string fixedCost, string accrualComments, string unit, string accounting, bool? isSMA, bool? isCostPerStore, string tPMNumberCASO, string tPMNumberPASO, string tPMNumberISO, string tPMNumberPB, string roleName, int? promotionDisplayTypeId, int? personaID, string cOSTPerStore, ref int? status, ref string message, ref int? newPromoId, string informationCategory);
		int PInsertUpdatePromotion(string mode, int? promotionID, string promotionDescription, string promotionName, int? promotionTypeID, string gEOInfo, string accountInfo, string channelInfo, string stateXML, int? accountId, int? edgeItemId, bool? isLocalized, string promotionTradeMarkID, string promotionBrandId, string promotionPackageID, string promotionPrice, int? promotionCategoryId, int? promotionDisplayLocationId, string promotionDisplayLocationOther, string promotionDisplayRequirement, DateTime? promotionStartDate, DateTime? promotionEndDate, string promotionStatus, string systemID, int? parentPromoId, bool? isNewVersion, string forecastVolume, string nationalDisplayTarget, string bottlerCommitment, int? branchId, int? bUID, int? regionId, string createdBy, string modifiedBy, string accountImageName, int? promotionGroupID, int? programId, string bestBets, string edgeComments, bool? isNationalPromotion, DateTime? promotionDisplayStartDate, DateTime? promotionDisplayEndDate, DateTime? promotionPricingStartDate, DateTime? promotionPricingEndDate, string variableRPC, int? redemption, string fixedCost, string accrualComments, string unit, string accounting, bool? isSMA, bool? isCostPerStore, string tPMNumberCASO, string tPMNumberPASO, string tPMNumberISO, string tPMNumberPB, string roleName, int? promotionDisplayTypeId, int? personaID, string cOSTPerStore, ref int? status, ref string message, ref int? newPromoId, string informationCategory, out int returnValue);
	}
}
#pragma warning restore 1591
