{"version":3,"file":"monitor.service.js","sourceRoot":"","sources":["monitor.service.ts"],"names":[],"mappings":";;;;;;;;;;AACA,qBAAuC,eAAe,CAAC,CAAA;AACvD,qBAA2B,eAAe,CAAC,CAAA;AAI3C,QAAO,uBAAuB,CAAC,CAAA;AAC/B,QAAO,6BAA6B,CAAC,CAAA;AAIrC,iCAA4B,4BAA4B,CAAC,CAAA;AAGzD;IAII,wBAAmB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAFtB,aAAQ,GAAW,gCAAa,CAAC,eAAe,CAAC;IAIxD,CAAC;IAED,4BAAG,GAAH,UAAI,OAAe;QACf,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAGD,0CAAiB,GAAjB,UAAkB,YAAmB,EAAE,YAAmB;QACtD,eAAe;QACf,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAE;QACzB,IAAI,GAAG,GAAI,IAAI,CAAC,QAAQ,GAAG,oDAAoD,GAAG,YAAY,GAAG,gBAAgB,GAAG,YAAY,CAAC;QAEjI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;aACpB,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAW,QAAQ,CAAC,EAApB,CAAoB,CAAC,CAAC;IAC/C,CAAC;IAED,4CAAmB,GAAnB,UAAoB,WAAkB;QAClC,UAAU;QACV,eAAe;QACf,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAE;QACzB,IAAI,GAAG,GAAI,IAAI,CAAC,QAAQ,GAAG,kDAAkD,GAAG,WAAW,CAAE;QAE7F,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;aACpB,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAW,QAAQ,CAAC,EAApB,CAAoB,CAAC,CAAC;IAC/C,CAAC;IAGD,2DAAkC,GAAlC,UAAmC,YAAmB;QACnD,WAAW;QACV,eAAe;QACf,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAE;QACzB,IAAI,GAAG,GAAI,IAAI,CAAC,QAAQ,GAAG,iEAAiE,GAAG,YAAY,CAAE;QAE7G,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;aACpB,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAW,QAAQ,CAAC,EAApB,CAAoB,CAAC,CAAC;IAC/C,CAAC;IAGD,8CAAqB,GAArB,UAAsB,OAAc,EAAE,SAAgB,EAAE,GAAU,EAAE,WAAmB;QACpF,WAAW;QACV,eAAe;QACf,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAE;QACzB,IAAI,GAAG,GAAI,IAAI,CAAC,QAAQ,GAAG,+CAA+C,GAAG,OAAO,GAAG,aAAa,GAAG,SAAS,GAAG,OAAO,GAAG,GAAG,GAAI,eAAe,GAAG,WAAW,CAAE;QAEnK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;aACpB,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAW,QAAQ,CAAC,EAApB,CAAoB,CAAC,CAAC;IAC/C,CAAC;IArDL;QAAC,iBAAU,EAAE;;sBAAA;IAgFb,qBAAC;AAAD,CAAC,AA/ED,IA+EC;AA/EY,sBAAc,iBA+E1B,CAAA","sourcesContent":["\nimport { Http,Headers, Response } from '@angular/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Rx';\n///<reference path=\"./../typings/browser/ambient/es6-shim/index.d.ts\"/>\nimport { bootstrap } from \"@angular/platform-browser-dynamic\";\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/toPromise';\n// import 'rxjs/Rx'; this will load all features\nimport { enableProdMode } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport {MerchConstant} from '../../app/MerchAppConstant';\n\n@Injectable()\nexport class MonitorService {\n\n    public _baseUri: string = MerchConstant.WebAPI_ENDPOINT;\n\n    constructor(public http: Http) {\n\n    }\n\n    set(baseUri: string): void {\n        this._baseUri = baseUri;\n    }\n\n\n    getMonitoringData(selectedDate:String, merchGroupID:number) {\n        //\"2016-06-11\" \n        var uri = this._baseUri ;\n        var uri =  this._baseUri + \"api/Monitoring/GetMornitoringLanding?dispatchDate=\" + selectedDate + \"&merchGroupID=\" + merchGroupID;\n\n        return this.http.get(uri)\n            .map(response => (<Response>response));\n    }\n\n    getStoreDetailsData(merchStopID:number) {\n        //debugger\n        //merchStopID=3\n        var uri = this._baseUri ;\n        var uri =  this._baseUri + \"api/Monitoring/GetMornitoringDetail?merchStopID=\" + merchStopID ;\n\n        return this.http.get(uri)\n            .map(response => (<Response>response));\n    }\n\n\n    getRouteMerchandiserByMerchGroupID(merchGroupID:number) {\n       // debugger\n        //merchStopID=3\n        var uri = this._baseUri ;\n        var uri =  this._baseUri + \"api/Monitoring/GetRouteMerchandiserByMerchGroupID?merchGroupID=\" + merchGroupID ;\n\n        return this.http.get(uri)\n            .map(response => (<Response>response));\n    }\n\n\n    editRouteMerchandiser(routeID:number, dayOfWeek:number, GSN:string, isForDelete:Boolean  )  {\n       // debugger\n        //merchStopID=3\n        var uri = this._baseUri ;\n        var uri =  this._baseUri + \"api/Monitoring/EditRouteMerchandiser?routeID=\" + routeID + \"&dayOfWeek=\" + dayOfWeek + \"&GSN=\" + GSN  + \"&isForDelete=\" + isForDelete ;\n\n        return this.http.get(uri)\n            .map(response => (<Response>response));\n    }\n\n\n\n//Todo: if get time to creat a custome global Observable, to manage service better and easy way \n\n//  getMonitoringDataOb (): Observable<any[]> {\n    // var uri = this._baseUri ;\n//     var uri = \"http://vh-portal3/DPSG.Webapi.Merchandiser/api/Monitoring/GetMornitoringLanding?dispatchDate=2016-06-11&merchGroupID=101\"\n  \n//    return this.http.get(uri)\n  //                  .map(this.extractData)\n  //                  .catch(this.handleError);\n // }\n\n//  private extractData(res: Response) {\n //   let body = res.json();\n //   return body.data || { };\n // }\n\n // private handleError (error: any) {\n //   let errMsg = (error.message) ? error.message :\n //     error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n //   console.error(errMsg); // log to console instead\n //   return Observable.throw(errMsg);\n // }\n\n}\n"]}