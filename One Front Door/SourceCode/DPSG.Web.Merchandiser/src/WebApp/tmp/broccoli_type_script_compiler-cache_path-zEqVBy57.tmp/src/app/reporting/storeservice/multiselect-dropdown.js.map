{"version":3,"file":"multiselect-dropdown.js","sourceRoot":"","sources":["multiselect-dropdown.ts"],"names":[],"mappings":"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","sourcesContent":["ï»¿/*\r\n * Angular 2 Dropdown Multiselect for Bootstrap\r\n * Current version: 0.1.0\r\n * \r\n * Simon Lindh\r\n * https://github.com/softsimon/angular-2-dropdown-multiselect\r\n */\r\n\r\nimport {Component, Pipe, OnInit, HostListener, Input, ElementRef, Output, EventEmitter} from '@angular/core';\r\nimport {Control} from '@angular/common';\r\n//import {Observable} from 'rxjs/Rx';\r\n\r\nexport interface IMultiSelectOption {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport interface IMultiSelectSettings {\r\n    pullRight?: boolean;\r\n    enableSearch?: boolean;\r\n    checkedStyle?: 'checkboxes' | 'glyphicon';\r\n    buttonClasses?: string;\r\n    selectionLimit?: number;\r\n    closeOnSelect?: boolean;\r\n    showCheckAll?: boolean;\r\n    showUncheckAll?: boolean;\r\n    dynamicTitleMaxItems?: number;\r\n    maxHeight?: string;\r\n}\r\n\r\nexport interface IMultiSelectTexts {\r\n    checkAll?: string;\r\n    uncheckAll?: string;\r\n    checked?: string;\r\n    checkedPlural?: string;\r\n    searchPlaceholder?: string;\r\n    defaultTitle?: string;\r\n}\r\n\r\n@Pipe({\r\n    name: 'searchFilter'\r\n})\r\n\r\nclass SearchFilter {\r\n    transform(options: Array<IMultiSelectOption>, args: Array<string>): Array<IMultiSelectOption> {\r\n        // return options.filter((option: IMultiSelectOption) => option.name.toLowerCase().indexOf(args[0].toLowerCase()) > -1);\r\n        return options.filter((option: IMultiSelectOption) => option.name.indexOf(args[0]) > -1);\r\n    }\r\n}\r\n\r\n\r\n@Component({\r\n    selector: 'ss-multiselect-dropdown',\r\n    pipes: [SearchFilter],\r\n    styles: [`\r\n\t\t    a { outline: none; }\r\n\t       `],\r\n    template: `\r\n        <div class=\"btn-group\">\r\n            <button type=\"button\" class=\"dropdown-toggle btn\" [ngClass]=\"settings.buttonClasses\" (click)=\"toggleDropdown()\">{{ getTitle() }}&nbsp;<span class=\"caret\"></span></button>\r\n            <ul *ngIf=\"isVisible\" class=\"dropdown-menu\" [class.pull-right]=\"settings.pullRight\" [style.max-height]=\"settings.maxHeight\" style=\"display: block; height: auto; overflow-y: auto;\">\r\n                <li style=\"margin: 0px 5px 5px 5px;\" *ngIf=\"settings.enableSearch\">\r\n                    <div class=\"input-group input-group-sm\">\r\n                        <span class=\"input-group-addon\" id=\"sizing-addon3\"><i class=\"fa fa-search\"></i></span>\r\n                        <input type=\"text\" class=\"form-control\" placeholder=\"{{ texts.searchPlaceholder }}\" aria-describedby=\"sizing-addon3\" [ngFormControl]=\"search\">\r\n                        <span class=\"input-group-btn\" *ngIf=\"searchFilterText.length > 0\">\r\n                            <button class=\"btn btn-default\" type=\"button\" (click)=\"clearSearch()\"><i class=\"fa fa-times\"></i></button>\r\n                        </span>\r\n                    </div>\r\n                </li>\r\n                <li class=\"divider\" *ngIf=\"settings.enableSearch\"></li>\r\n                <li *ngIf=\"settings.showCheckAll\">\r\n                    <a href=\"#\" role=\"menuitem\" tabindex=\"-1\" (click)=\"checkAll()\">\r\n                        <span style=\"width: 16px;\" class=\"glyphicon glyphicon-ok\"></span>\r\n                        {{ texts.checkAll }}\r\n                    </a>\r\n                </li>\r\n                <li *ngIf=\"settings.showUncheckAll\">\r\n                    <a href=\"#\" role=\"menuitem\" tabindex=\"-1\" (click)=\"uncheckAll()\">\r\n                        <span style=\"width: 16px;\" class=\"glyphicon glyphicon-remove\"></span>\r\n                        {{ texts.uncheckAll }}\r\n                    </a>\r\n                </li>\r\n                <li *ngIf=\"settings.showCheckAll || settings.showUncheckAll\" class=\"divider\"></li>\r\n                <li *ngFor=\"let option of options\">\r\n                    <a href=\"javascript:void(0)\" role=\"menuitem\" tabindex=\"-1\" (click)=\"setSelected($event, option)\">\r\n                        <input *ngIf=\"settings.checkedStyle == 'checkboxes'\" type=\"checkbox\" [checked]=\"isSelected(option)\" />\r\n                        <span *ngIf=\"settings.checkedStyle == 'glyphicon'\" style=\"width: 16px;\" class=\"glyphicon\" [class.glyphicon-ok]=\"isSelected(option)\"></span>\r\n                        {{ option.name }}\r\n                    </a>\r\n                </li>            \r\n            </ul>\r\n        </div>\r\n    `\r\n})\r\n\r\nexport class MultiselectDropdown implements OnInit {\r\n    @Input() options: Array<IMultiSelectOption>;\r\n    @Input() settings: IMultiSelectSettings;\r\n    @Input() texts: IMultiSelectTexts;\r\n    @Input('defaultModel') selectedModel: Array<number> = [];\r\n    @Output('selectedModel') model = new EventEmitter();\r\n    @Output() selectionLimitReached = new EventEmitter();\r\n    @HostListener('document: click', ['$event.target'])\r\n    onClick(target) {\r\n        let parentFound = false;\r\n        while (target !== null && !parentFound) {\r\n            if (target === this.element.nativeElement) {\r\n                parentFound = true;\r\n            }\r\n            target = target.parentElement;\r\n        }\r\n        if (!parentFound) {\r\n            this.isVisible = false;\r\n        }\r\n    }\r\n\r\n    private numSelected: number = 0;\r\n    private isVisible: boolean = false;\r\n    private search = new Control();\r\n    private searchFilterText: string = '';\r\n    private defaultSettings: IMultiSelectSettings = {\r\n        pullRight: false,\r\n        enableSearch: false,\r\n        checkedStyle: 'checkboxes',\r\n        buttonClasses: 'btn btn-default',\r\n        selectionLimit: 0,\r\n        closeOnSelect: false,\r\n        showCheckAll: false,\r\n        showUncheckAll: false,\r\n        dynamicTitleMaxItems: 3,\r\n        maxHeight: '300px',\r\n    };\r\n    private defaultTexts: IMultiSelectTexts = {\r\n        checkAll: 'Check all',\r\n        uncheckAll: 'Uncheck all',\r\n        checked: 'checked',\r\n        checkedPlural: 'checked',\r\n        searchPlaceholder: 'Search...',\r\n        defaultTitle: 'Select',\r\n    };\r\n\r\n    constructor(\r\n        private element: ElementRef\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.settings = (<any>Object).assign(this.defaultSettings, this.settings);\r\n        this.texts = (<any>Object).assign(this.defaultTexts, this.texts);\r\n        this.updateNumSelected();\r\n        this.search.valueChanges\r\n            .subscribe((text: string) => {\r\n                this.searchFilterText = text;\r\n            });\r\n    }\r\n\r\n    clearSearch() {\r\n        this.search.updateValue('');\r\n    }\r\n\r\n    toggleDropdown() {\r\n        this.isVisible = !this.isVisible;\r\n    }\r\n\r\n    modelChanged() {\r\n        this.updateNumSelected();\r\n        this.model.emit(this.selectedModel);\r\n    }\r\n\r\n    isSelected(option: IMultiSelectOption): boolean {\r\n        return this.selectedModel.indexOf(option.id) > -1;\r\n    }\r\n\r\n    setSelected(event: Event, option: IMultiSelectOption) {\r\n        var index = this.selectedModel.indexOf(option.id);\r\n        if (index > -1) {\r\n            this.selectedModel.splice(index, 1);\r\n        } else {\r\n            if (this.settings.selectionLimit === 0 || this.selectedModel.length < this.settings.selectionLimit) {\r\n                this.selectedModel.push(option.id);\r\n            } else {\r\n                this.selectionLimitReached.emit(this.selectedModel.length);\r\n                return;\r\n            }\r\n        }\r\n        if (this.settings.closeOnSelect) {\r\n            this.toggleDropdown();\r\n        }\r\n        this.modelChanged();\r\n    }\r\n\r\n    getTitle() {\r\n        if (this.selectedModel.length === 0) {\r\n            return this.texts.defaultTitle;\r\n        }\r\n        if (this.settings.dynamicTitleMaxItems >= this.numSelected) {\r\n            return this.options\r\n                .filter((option: IMultiSelectOption) => this.selectedModel.indexOf(option.id) > -1)\r\n                .map((option: IMultiSelectOption) => option.name)\r\n                .join(', ');\r\n        }\r\n        // return this.numSelected + ' ' + (this.numSelected === 1 ? this.texts.checked : this.texts.checkedPlural);\r\n        return this.selectedModel.length + ' ' + (this.selectedModel.length === 1 ? this.texts.checked : this.texts.checkedPlural);\r\n    }\r\n\r\n    updateNumSelected() {\r\n        this.numSelected = this.selectedModel.length;\r\n    }\r\n\r\n    checkAll() {\r\n        this.selectedModel = this.options.map(option => option.id);\r\n        this.modelChanged();\r\n    }\r\n\r\n    uncheckAll() {\r\n        this.selectedModel = [];\r\n        this.modelChanged();\r\n    }\r\n\r\n}"]}