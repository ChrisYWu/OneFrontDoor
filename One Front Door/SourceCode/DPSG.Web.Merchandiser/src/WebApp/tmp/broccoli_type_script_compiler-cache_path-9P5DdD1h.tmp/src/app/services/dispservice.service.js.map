{"version":3,"file":"dispservice.service.js","sourceRoot":"","sources":["dispservice.service.ts"],"names":[],"mappings":";;;;;;;;;;AACA,qBAAuC,eAAe,CAAC,CAAA;AACvD,qBAA2B,eAAe,CAAC,CAAA;AAM3C,QAAO,uBAAuB,CAAC,CAAA;AAC/B,QAAO,6BAA6B,CAAC,CAAA;AAOrC;IAKI,4BAAmB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAE7B,CAAC;IAED,gCAAG,GAAH,UAAI,OAAe;QACf,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAED,gCAAG,GAAH;QACI,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAE;QAEzB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;aACpB,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAW,QAAQ,CAAC,EAApB,CAAoB,CAAC,CAAC;IAC/C,CAAC;IAED,iCAAI,GAAJ,UAAK,IAAU,EAAE,OAAuB;QAAvB,uBAAuB,GAAvB,cAAuB;QACpC,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAEnD,EAAE,CAAC,CAAC,OAAO,CAAC;YACR,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;iBAC3D,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAgB,QAAS,CAAC,IAAI,EAAE,EAAhC,CAAgC,CAAC,CAAC;QAC3D,IAAI;YACA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;IAED,mCAAM,GAAN,UAAO,EAAU;QACb,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;aACvD,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAgB,QAAS,CAAC,IAAI,EAAE,EAAhC,CAAgC,CAAC,CAAA;IAC1D,CAAC;IAED,2CAAc,GAAd,UAAe,QAAgB;QAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;aAC5B,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAgB,QAAS,CAAC,IAAI,EAAE,EAAhC,CAAgC,CAAC,CAAA;IAC1D,CAAC;IAxCL;QAAC,iBAAU,EAAE;;0BAAA;IAyCb,yBAAC;AAAD,CAAC,AAxCD,IAwCC;AAxCY,0BAAkB,qBAwC9B,CAAA","sourcesContent":["\r\nimport { Http,Headers, Response } from '@angular/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n///<reference path=\"./../typings/browser/ambient/es6-shim/index.d.ts\"/>\r\nimport { bootstrap } from \"@angular/platform-browser-dynamic\";\r\n\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/toPromise';\r\n// import 'rxjs/Rx'; this will load all features\r\nimport { enableProdMode } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\n\r\n@Injectable()\r\nexport class DispserviceService {\r\n\r\n\r\n    public _baseUri: string;\r\n\r\n    constructor(public http: Http) {\r\n\r\n    }\r\n\r\n    set(baseUri: string): void {\r\n        this._baseUri = baseUri;\r\n    }\r\n\r\n    get() {\r\n        var uri = this._baseUri ;\r\n\r\n        return this.http.get(uri)\r\n            .map(response => (<Response>response));\r\n    }\r\n\r\n    post(data?: any, mapJson: boolean = true) {\r\n        var headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n\r\n        if (mapJson)\r\n            return this.http.post(this._baseUri, data, { headers: headers })\r\n                .map(response => <any>(<Response>response).json());\r\n        else\r\n            return this.http.post(this._baseUri, data);\r\n    }\r\n\r\n    delete(id: number) {\r\n        return this.http.delete(this._baseUri + '/' + id.toString())\r\n            .map(response => <any>(<Response>response).json())\r\n    }\r\n\r\n    deleteResource(resource: string) {\r\n        return this.http.delete(resource)\r\n            .map(response => <any>(<Response>response).json())\r\n    }\r\n}\r\n"]}