{"version":3,"file":"storelookup.service.js","sourceRoot":"","sources":["storelookup.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAA6B,eAAe,CAAC,CAAA;AAE7C,QAAO,SAAS,CAAC,CAAA;AAGjB;IAKE,4BAAoB,IAAS;QAAT,SAAI,GAAJ,IAAI,CAAK;IAAG,CAAC;IAEhC,0CAAa,GAAb,UAAc,OAAY;QAA1B,iBAgCC;QA7BE,IAAI,SAAS,GAAU,EAAE,CAAC;QAC5B,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC;YACxB,IAAI,MAAM,GAAW,IAAI,MAAM,CAAC,GAAG,GAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAC9C,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC;YACrB,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACtB,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;YAC1C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,SAAS,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;YAC3C,CAAC;QACH,CAAC;QAED,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YACrB,IAAI,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC7B,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;QACjD,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;aACtB,GAAG,CAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,EAAE,EAAX,CAAW,CAAC;aACzB,GAAG,CAAE,UAAA,IAAI;YACR,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,IAAK,IAAI,CAAC;YAC9B,EAAE,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACpB,IAAI,KAAK,GAAG,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACvC,KAAK,CAAC,OAAO,CAAC,UAAS,EAAE;oBACvB,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACL,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACN,CAAC;IAxCJ;QAAC,iBAAU,EAAE;;0BAAA;IA0Cb,yBAAC;AAAD,CAAC,AAzCD,IAyCC;AAzCY,0BAAkB,qBAyC9B,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport {Http, Response} from \"@angular/http\";\nimport {Observable} from \"rxjs\";\nimport 'rxjs/Rx';\n\n@Injectable()\nexport class StorelookupService {\n\n  public sourceUrl: string;\n  public pathToData: string;\n\n  constructor(private http:Http) {}\n\n   getRemoteData(options: any): Observable<Response> {\n\n     \n      let keyValues: any[] = [];\n    let url = \"\";\n    for (var key in options) { // replace all keyword to value\n      let regexp: RegExp = new RegExp(':'+key, 'g');\n      url = this.sourceUrl;\n      if (url.match(regexp)) {\n        url = url.replace(regexp, options[key]);\n      } else {\n        keyValues.push(key + \"=\" + options[key]);\n      }\n    }\n    \n    if (keyValues.length) {\n      var qs = keyValues.join(\"&\");\n      url += url.match(/\\?[a-z]/i) ? qs : ('?' + qs);\n    }\n    \n    return this.http.get(url)\n      .map( resp => resp.json())\n      .map( resp => {\n        var list = resp.data  || resp;\n        if (this.pathToData) {\n          var paths = this.pathToData.split('.');\n          paths.forEach(function(el) {\n            list = list[el];\n          });\n        }\n        return list;\n      });\n   }\n\n}\n"]}